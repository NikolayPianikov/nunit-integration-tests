// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace nunit.integration.tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NUnit should support TeamCity")]
    public partial class NUnitShouldSupportTeamCityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TeamCity.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NUnit should support TeamCity", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("NUnit path is ..\\nunit\\", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The NUnit sends TeamCity service messages when I run successful test for NUnit3")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void TheNUnitSendsTeamCityServiceMessagesWhenIRunSuccessfulTestForNUnit3(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The NUnit sends TeamCity service messages when I run successful test for NUnit3", @__tags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 8
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out"});
            table1.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output"});
            table1.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
#line 18
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table1, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The NUnit sends TeamCity service messages when I run it for different types of te" +
            "sts")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("ProjectFile", "Version45", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("ProjectFile", "Version40", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CmdArguments", "Version45", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CmdArguments", "Version40", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("ProjectFile", "Version45", "EnvVariable", new string[0])]
        [NUnit.Framework.TestCaseAttribute("ProjectFile", "Version40", "EnvVariable", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CmdArguments", "Version45", "EnvVariable", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CmdArguments", "Version40", "EnvVariable", new string[0])]
        public virtual void TheNUnitSendsTeamCityServiceMessagesWhenIRunItForDifferentTypesOfTests(string configurationType, string frameworkVersion, string teamCityIntegration, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The NUnit sends TeamCity service messages when I run it for different types of te" +
                    "sts", @__tags);
#line 34
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 35
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.And("I have added failed method as FailedTest to the class Foo.Tests.UnitTests2 for fo" +
                    "o.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("I have added ignored method as IgnoredTest to the class Foo.Tests.UnitTests3 for " +
                    "foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.And("I have added inconclusive method as InconclusiveTest to the class Foo.Tests.UnitT" +
                    "ests4 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And(string.Format("I want to use {0} type of TeamCity integration", teamCityIntegration), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And(string.Format("I want to use {0} configuration type", configurationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then("the exit code should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out"});
            table2.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output"});
            table2.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests2.FailedTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests2.FailedTest",
                        "",
                        "",
                        ".+",
                        "",
                        "Reason",
                        "Foo.Tests.UnitTests2.FailedTest()",
                        ""});
            table2.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests2.FailedTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests3.IgnoredTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "testIgnored",
                        "Foo.Tests.UnitTests3.IgnoredTest",
                        "",
                        "",
                        ".+",
                        "",
                        "Reason",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests4.InconclusiveTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "testIgnored",
                        "Foo.Tests.UnitTests4.InconclusiveTest",
                        "",
                        "",
                        ".+",
                        "",
                        "Inconclusive",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
#line 49
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The NUnit sends TeamCity service messages when I run it for failed setup")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void TheNUnitSendsTeamCityServiceMessagesWhenIRunItForFailedSetup(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The NUnit sends TeamCity service messages when I run it for failed setup", @__tags);
#line 84
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 85
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 86
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.And("I have added failedSetUp method as FailedSetUp to the class Foo.Tests.UnitTests1 " +
                    "for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
 testRunner.Then("the exit code should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out"});
            table3.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "System.Exception",
                        "Foo.Tests.UnitTests1.FailedSetUp()",
                        ""});
            table3.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
#line 96
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The NUnit sends TeamCity service messages when I run it for failed tear down")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void TheNUnitSendsTeamCityServiceMessagesWhenIRunItForFailedTearDown(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The NUnit sends TeamCity service messages when I run it for failed tear down", @__tags);
#line 112
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 113
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 114
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.And("I have added failedTearDown method as FailedTearDown to the class Foo.Tests.UnitT" +
                    "ests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
 testRunner.Then("the exit code should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out"});
            table4.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table4.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table4.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table4.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "System.Exception",
                        "Foo.Tests.UnitTests1.FailedTearDown()",
                        ""});
            table4.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output"});
            table4.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table4.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table4.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
#line 124
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The NUnit sends TeamCity service messages when I run it for parallelizable tests")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void TheNUnitSendsTeamCityServiceMessagesWhenIRunItForParallelizableTests(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The NUnit sends TeamCity service messages when I run it for parallelizable tests", @__tags);
#line 141
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 142
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 143
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable1 to the " +
                    "class Foo.Tests.UnitTests1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable2 to the " +
                    "class Foo.Tests.UnitTests1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable3 to the " +
                    "class Foo.Tests.UnitTests1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.And("I have added attribute [assembly: NUnit.Framework.Parallelizable] to the assembly" +
                    " foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.And("I have added attribute [NUnit.Framework.Parallelizable] to the class Foo.Tests.Un" +
                    "itTests1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.And("I have added NUnit framework references to foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable4 to the " +
                    "class Foo.Tests.UnitTests1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable5 to the " +
                    "class Foo.Tests.UnitTests1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable6 to the " +
                    "class Foo.Tests.UnitTests1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.And("I have added attribute [assembly: NUnit.Framework.Parallelizable] to the assembly" +
                    " foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
 testRunner.And("I have added attribute [NUnit.Framework.Parallelizable] to the class Foo.Tests.Un" +
                    "itTests1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
 testRunner.And("I have added NUnit framework references to foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 155
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 156
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
 testRunner.And("I have compiled the assembly foo1.tests to file mocks\\foo1.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.And("I have compiled the assembly foo2.tests to file mocks\\foo2.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 159
 testRunner.And("I have added the assembly mocks\\foo1.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 160
 testRunner.And("I have added the assembly mocks\\foo2.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 162
 testRunner.And("I have added the arg workers=10 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.And("I have added the arg agents=10 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 165
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table5.AddRow(new string[] {
                        "Test Count",
                        "6"});
            table5.AddRow(new string[] {
                        "Passed",
                        "6"});
            table5.AddRow(new string[] {
                        "Failed",
                        "0"});
            table5.AddRow(new string[] {
                        "Inconclusive",
                        "0"});
            table5.AddRow(new string[] {
                        "Skipped",
                        "0"});
#line 166
 testRunner.And("the Test Run Summary should has following:", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The NUnit sends TeamCity service messages when I run successful tests with the sa" +
            "me names in the several assemblies")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void TheNUnitSendsTeamCityServiceMessagesWhenIRunSuccessfulTestsWithTheSameNamesInTheSeveralAssemblies(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The NUnit sends TeamCity service messages when I run successful tests with the sa" +
                    "me names in the several assemblies", @__tags);
#line 180
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 181
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 182
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
 testRunner.And("I have added NUnit framework references to foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
 testRunner.And("I have added NUnit framework references to foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.And("I have compiled the assembly foo1.tests to file mocks\\foo1.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
 testRunner.And("I have compiled the assembly foo2.tests to file mocks\\foo2.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 190
 testRunner.And("I have added the assembly mocks\\foo1.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 191
 testRunner.And("I have added the assembly mocks\\foo2.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
 testRunner.And("I have added the arg workers=1 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 193
 testRunner.And("I have added the arg agents=1 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 194
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 196
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out"});
            table6.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo1.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output"});
            table6.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo1.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo2.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output"});
            table6.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo2.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
#line 197
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The NUnit sends TeamCity service messages when I run many test for NUnit3")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void TheNUnitSendsTeamCityServiceMessagesWhenIRunManyTestForNUnit3(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The NUnit sends TeamCity service messages when I run many test for NUnit3", @__tags);
#line 220
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 221
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 222
 testRunner.And("I have added 100 successful methods as SuccessfulTest to the class Foo.Tests.Unit" +
                    "Tests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 226
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 227
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 228
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 229
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 230
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
